class MissilesController{

    //------ fields ------
    field Array missilesArr;
    field int missileArrLength, missilesArrPtr;

    //--------- constructor ---------
    constructor MissilesController new () {
        var int i;
        let missileArrLength = 8;
        let missilesArr = Array.new(missileArrLength);
        let i = 0;
        while (i < missileArrLength) {
            let missilesArr[i] = null;
            let i = i + 1;
        }
        let missilesArrPtr = 0;

        return this;
    }
    //---------- getter ---------
    method int length(){
        return missileArrLength;
    }

    //---------- methods --------------
    
    /*
    create new missile from the position of the spaceShip argument
    */
    method void shoot (SpaceShip spaceShip) {
        var Missile _missile;
        var int y; 
        var int lastPtr;

        let lastPtr = missilesArrPtr - 1;
        if(lastPtr = -1){
            let lastPtr = missileArrLength - 1;
        }

        if(~(missilesArr[lastPtr] = null)){
            let _missile = missilesArr[lastPtr];
            let y = _missile.y();
            if(y > 220){
                return;
            }
        }

        if(~(missilesArr[missilesArrPtr]=null)){
            let _missile = missilesArr[missilesArrPtr];
            do _missile.dispose();
        }
        
        let missilesArr[missilesArrPtr] = spaceShip.shoot();
        let missilesArrPtr = missilesArrPtr + 1;
        if(missilesArrPtr = missileArrLength){
            let missilesArrPtr = 0;
        }
        return;
    }

    /*
    move all missiles in the array
    */
    method void moveMissiles () {
        var int i;
        var Missile _missile;
        let i = 0;
        while( i < missileArrLength ){
            if(~(missilesArr[i] = null)){
                let _missile = missilesArr[i];
                do _missile.move();
                if(_missile.y() - 3 < 0){
                    do _missile.dispose();
                    let missilesArr[i] = null;
                }
            }
            let i = i + 1;
        }
        return;
    }

    /*
    reurn a missile at the given i
    */
    method Missile at(int i){
        if (missilesArr[i] = null){
            return null;
        }
        return missilesArr[i];
    }

    /*
    remove the missile at index i
    */
    method void remove (int i) {
        var Missile _missile;
        let _missile = missilesArr[i];
        do _missile.dispose();
        let missilesArr[i] = null;
        return;
    }

    /*
    remove all the missiles
    */
    method void clear () {
        var int i;
        let i = 0;
        while (i < missileArrLength) {
            if (~(missilesArr[i] = null)){
                do remove(i);
            }
            let i = i + 1;
        }
        let missilesArrPtr = 0;
        return;
    }

    /*
    clear all and dispose array and memory
    */
    method void dispose () {
        do clear();
        do missilesArr.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
