/**
Math.abs
Math.multiply
Math.divide
Math.min
Math.max
Math.sqrt

String.new
String.dispose
String.length
String.charAt
String.setCharAt
String.appendChar
String.eraseLastChar
String.intValue
String.setInt
String.backSpace
String.doubleQuote
/**
  Neriya Bar-lev  313366676
  Netanel Avraham 207544131
*/

class SpaceShip{
    // -------- fields --------
    field int x, y;
    field int hight;
    field int baseHalfWidth;
    field int wingWidth;

    // ------------- constructor -----------
    constructor SpaceShip new(){
        let x = 256;
        let y = 255;
        let hight = 30;
        let baseHalfWidth=4;
        let wingWidth=20;
        do draw();
        return this;
    }

    // ------------- getters ----------
    method int x () {
        return x;
    }

    method int y () {
        return y-hight;
    }

    // -------------- methods ------------
    
    /*
    draw the space ship
    */
    method void draw() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x - baseHalfWidth, y-hight, x+baseHalfWidth,y);
        do Screen.drawRectangle(x - (baseHalfWidth+8), y-(hight/2), x-(baseHalfWidth+6),y);
        do Screen.drawRectangle(x - (baseHalfWidth+8), y-(hight/2), x-(baseHalfWidth+6),y);
        do Screen.drawRectangle(x + baseHalfWidth +6, y-(hight/2), x+baseHalfWidth+8,y);
        do Screen.drawLine(x-wingWidth, y, x, y-wingWidth);
        do Screen.drawLine(x-wingWidth, y, x, y-wingWidth+15);
        do Screen.drawLine(x+wingWidth, y, x, y-wingWidth);
        do Screen.drawLine(x+wingWidth, y, x, y-wingWidth+15);
        return;
    }

    /*
    erase the space ship at oldX
    */
    method void eraseOld (int oldX) {
        do Screen.setColor(true);
        do Screen.drawRectangle(oldX - baseHalfWidth, y-hight, oldX+baseHalfWidth,y);
        do Screen.drawRectangle(oldX - (baseHalfWidth+8), y-(hight/2), oldX-(baseHalfWidth+6),y);
        do Screen.drawRectangle(oldX + baseHalfWidth +6, y-(hight/2), oldX+baseHalfWidth+8,y);
        do Screen.drawLine(oldX-wingWidth, y, oldX, y-wingWidth);
        do Screen.drawLine(oldX-wingWidth, y, oldX, y-wingWidth+15);
        do Screen.drawLine(oldX+wingWidth, y, oldX, y-wingWidth);
        do Screen.drawLine(oldX+wingWidth, y, oldX, y-wingWidth+15);
        return;
    }

    /*
    move the space ship left
    */
    method void moveLeft () {
        var int oldX;
        let oldX = x;
        if(x-wingWidth=0){
            return;
        }
        if(x-1-wingWidth < 0){
            let x = wingWidth;
        }
        else {
            let x = x-1;
        }
        do eraseOld(oldX);
        do draw();
        return;
    }

    /*
    move the space ship right
    */
    method void moveRight () {
        var int oldX;
        let oldX = x;
        if(x+wingWidth = 511){
            return;
        }
        if(x+1+wingWidth > 511){
            let x = 511-wingWidth;
        }
        else {
            let x = x + 1;
        }
        do eraseOld(oldX);
        do draw();
        return;
    }

    /*
    create missile from the position of the space ship and return it
    */
    method Missile shoot () {
        return Missile.new(x, y - 4);
    }

    /*
    erase the space ship from screen and dispose
    */
    method void dispose () {
        do eraseOld(x);
        do Memory.deAlloc(this);
        return;
    }
}