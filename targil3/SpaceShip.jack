/**
Math.abs
Math.multiply
Math.divide
Math.min
Math.max
Math.sqrt

String.new
String.dispose
String.length
String.charAt
String.setCharAt
String.appendChar
String.eraseLastChar
String.intValue
String.setInt
String.backSpace
String.doubleQuote
String.newLine

Array.new
Array.dispose

Output.moveCursor
Output.printChar
Output.printString
Output.printInt
Output.println
Output.backSpace

Screen.clearScreen
Screen.setColor
Screen.drawPixel
Screen.drawLine
Screen.drawRectangle
Screen.drawCircle

Sys.halt
Sys.error
Sys.wait

Memory.peek
Memory.poke
Memory.alloc
Memory.deAlloc

Keyboard.keyPressed
Keyboard.readChar
Keyboard.readLine
Keyboard.readInt
*/

class SpaceShip{
    field int x, y;
    field int hight;
    field int baseHalfWidth;
    field int wingWidth;
    field int speed;

    constructor SpaceShip new(){
        let x = 256;
        let y = 255;
        let hight = 30;
        let baseHalfWidth=4;
        let wingWidth=20;
        let speed=8;

        do draw();
        return this;
    }
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x - baseHalfWidth, y-hight, x+baseHalfWidth,y);
        do Screen.drawRectangle(x - (baseHalfWidth+8), y-(hight/2), x-(baseHalfWidth+6),y);
        do Screen.drawRectangle(x + baseHalfWidth +6, y-(hight/2), x+baseHalfWidth+8,y);
        do Screen.drawLine(x-wingWidth, y, x, y-wingWidth);
        do Screen.drawLine(x+wingWidth, y, x, y-wingWidth);
        return;
    }
    method void eraseOld (int oldX) {
        do Screen.setColor(false);
        do Screen.drawRectangle(oldX - baseHalfWidth, y-hight, oldX+baseHalfWidth,y);
        do Screen.drawRectangle(oldX - (baseHalfWidth+8), y-(hight/2), oldX-(baseHalfWidth+6),y);
        do Screen.drawRectangle(oldX + baseHalfWidth +6, y-(hight/2), oldX+baseHalfWidth+8,y);
        do Screen.drawLine(oldX-wingWidth, y, oldX, y-wingWidth);
        do Screen.drawLine(oldX+wingWidth, y, oldX, y-wingWidth);
        return;
    }

    method void moveLeft () {
        var int oldX;
        let oldX = x;
        if(x-speed-wingWidth < 0){
            let x = wingWidth;
        }
        else {
            let x = x-speed;
        }
        do eraseOld(oldX);
        do draw();
        return;
    }

    method void moveRight () {
        var int oldX;
        let oldX = x;
        if(x+speed+wingWidth > 511){
            let x = 511-wingWidth;
        }
        else {
            let x = x+speed;
        }
        do eraseOld(oldX);
        do draw();
        return;
    }
}