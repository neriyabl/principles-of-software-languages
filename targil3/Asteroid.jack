/**
  Neriya Bar-lev  313366676
  Netanel Avraham 207544131
*/
class Asteroid {

    // -------------- fields ----------
    field int speed, speedCount;
    field int x, y, size, directionX, directionY;
    field int secondX, secondY, secondSize;

    // -------------- constructor ---------- 
    constructor Asteroid new (int _x, int _y, int _size, int _directionX, int _speed) {
        let x = _x;
        let y = _y;
        let size = _size;
        let directionX = _directionX;
        let directionY = 1;
        let speedCount = 0;
        let speed = _speed;
        let secondX = Random.between(-4, 4);
        let secondY = Random.between(1, 5);
        let secondSize = Random.between(size-8, size);
        do draw();
        return this;
    }

    // ------------- methods -----------
    method void draw () {
        do Screen.setColor(false);
        do Screen.drawCircle(x,y,size);
        do Screen.drawCircle(x + secondX, y + secondY, secondSize);
        return;
    }

    method void erase () {
        do Screen.setColor(true);
        do Screen.drawCircle(x,y,size);
        do Screen.drawCircle(x + secondX, y + secondY, secondSize);
        return;
    }

    /*
    move just if speedCount equal to speed
    */
    method void move () {
        if(speedCount = speed){
            do erase();
            let x = x + directionX;
            let y = y + directionY;

            if(~end()){
                do draw();
            }
            let speedCount = 0;
        } else {
            let speedCount = speedCount + 1;
        }
        return;
    }

    /*
    check if the asteroid came to end of the screen
    */
    method boolean end() {
        return (x > (510 - size - (secondSize - secondX))) | (x < (size + secondSize + secondX + 2)) | 
            (y > (255 - size - secondSize - secondY));
    }

    /*
    checck if the given x, y is a point on the asteroid (asterid cant be biger then 80)
    */
    method boolean hit(int _x,int _y){
        var int pawDistanse, xDiff, yDiff, xPaw, yPaw;
        let xDiff = Math.abs(x - _x);
        let yDiff = Math.abs(y - _y);
        if ( xDiff > 80 | yDiff > 80 ) {
            return false;
        }
        let xPaw = (xDiff * xDiff);
        let yPaw = (yDiff * yDiff);
        let pawDistanse = xPaw + yPaw;
        if( xPaw < 0 | yPaw < 0 | pawDistanse < 0) {
            return false;
        }
        return pawDistanse < (size * size);
    }

    /*
    remove the asteroid from screen and dispose
    */
    method void dispose () {
        do erase();
        do Memory.deAlloc(this);
        return;
    }
}