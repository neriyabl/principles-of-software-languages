/**
Math.abs
Math.multiply
Math.divide
Math.min
Math.max
Math.sqrt

String.new
String.dispose
String.length
String.charAt
String.setCharAt
String.appendChar
String.eraseLastChar
String.intValue
String.setInt
String.backSpace
String.doubleQuote
String.newLine

Array.new
Array.dispose

Output.moveCursor
Output.printChar
Output.printString
Output.printInt
Output.println
Output.backSpace

Screen.clearScreen
Screen.setColor
Screen.drawPixel
Screen.drawLine
Screen.drawRectangle
Screen.drawCircle

Sys.halt
Sys.error
Sys.wait

Memory.peek
Memory.poke
Memory.alloc
Memory.deAlloc

Keyboard.keyPressed
Keyboard.readChar
Keyboard.readLine
Keyboard.readInt

field var let static
constructor method function
int boolean char void
let do if else while return
true false null this
*/
class Asteroid {
    field int x, y, size, directionX, directionY, speed, speedCount; 
    constructor Asteroid new (int _x, int _y, int _size, int _directionX, int _directionY) {
        let x = _x;
        let y = _y;
        let size = _size;
        let directionX = _directionX;
        let directionY = _directionY;
        let speedCount = 0;
        let speed = 10;
        do draw();
        return this;
    }
    method void draw () {
        do Screen.setColor(false);
        do Screen.drawCircle(x,y,size);
        do Screen.drawCircle(x+3, y+4, size-2);
        return;
    }

    method void erase () {
        do Screen.setColor(true);
        do Screen.drawCircle(x,y,size);
        do Screen.drawCircle(x+3, y+4, size-2);
        return;
    }

    method void move () {
        if(speedCount = speed){
            do erase();
            if(x<(512-size-3) & y<(256-size-4)){
                let x = x + directionX;
                let y = y + directionY;
                do draw();
            }
            let speedCount = 0;
        } else {
            let speedCount = speedCount + 1;
        }

        return;
    }
}