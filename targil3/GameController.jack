/**
Math.abs
Math.multiply
Math.divide
Math.min
Math.max
Math.sqrt

String.new
String.dispose
String.length
String.charAt
String.setCharAt
String.appendChar
String.eraseLastChar
String.intValue
String.setInt
String.backSpace
String.doubleQuote
String.newLine

Array.new
Array.dispose

Output.moveCursor
Output.printChar
Output.printString
Output.printInt
Output.println
Output.backSpace

Screen.clearScreen
Screen.setColor
Screen.drawPixel
Screen.drawLine
Screen.drawRectangle
Screen.drawCircle

Sys.halt
Sys.error
Sys.wait

Memory.peek
Memory.poke
Memory.alloc
Memory.deAlloc

Keyboard.keyPressed
Keyboard.readChar
Keyboard.readLine
Keyboard.readInt

field var let static
constructor method function
int boolean char void
let do if else while return
true false null this
*/
class GameController {
    
    field SpaceShip spaceShip;
    field AsteroidsController asteroids;
    field MissilesController missiles;
    field int printSatrCounter, score;

    constructor GameController new () {
        let spaceShip = SpaceShip.new();
        let asteroids = AsteroidsController.new();
        let missiles = MissilesController.new();

        do Random.seed(1);
        let printSatrCounter = 0;

        do updateScore(0);

        return this;
    }

    method void run () {
        var char key;
        var boolean exit;
        var int randomNum;

        let exit = false;
        
        while(~exit) {
            let randomNum= Random.between(0,10000);
            if(Keyboard.keyPressed() = 130) {
                do spaceShip.moveLeft();
            }
            if(Keyboard.keyPressed() = 132) {
                do spaceShip.moveRight();
            }
            if(Keyboard.keyPressed() = 32) {
                do missiles.shoot(spaceShip);
            }
            do asteroids.newAsteroid(randomNum);
            do asteroids.moveAsteroids();
            do missiles.moveMissiles();
            do checkMissilesHit();
            if (checkSpaceShipHit()){
                let exit = true;
            }
            let printSatrCounter = printSatrCounter + 1;
            //do Sys.wait(1);
            if (printSatrCounter = 500){
                do printStar();
                let printSatrCounter = 0;
            }
        }

        return;
    }

    method void printStar () {
        var int x, y;
        let x = Random.between(0, 512);
        let y = Random.between(0, 256);
        do Screen.setColor(false);
        do Screen.drawPixel(x, y);
        return;
    }

    method void checkMissilesHit () {
        var int i;
        var Missile _missile;
        let i = 0;
        while (i < missiles.length()) {
            if (~(missiles.at(i) = null)){
                let _missile = missiles.at(i);
                if (asteroids.hit(_missile.x(), _missile.y())) {
                    do missiles.remove(i);
                    do updateScore(Random.between(5,15));
                }
            }
            let i = i + 1;
        }
        return;
    }

    method boolean checkSpaceShipHit () {
        return asteroids.hit(spaceShip.x(), spaceShip.y());
    }

    method void updateScore (int points) {
        do Output.moveCursor(0, 0);
        do Output.printString("score: ");
        do Output.printInt(score);
        let score = score + points;
        return;
    }
}